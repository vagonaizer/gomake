package generator

import (
	"fmt"
	"os/exec"
)

// GitGenerator handles git repository initialization
type GitGenerator struct {
	config *Config
	logger Logger
}

// NewGitGenerator creates a new git generator
func NewGitGenerator(config *Config, logger Logger) *GitGenerator {
	return &GitGenerator{
		config: config,
		logger: logger,
	}
}

// Initialize initializes git repository
func (gg *GitGenerator) Initialize(projectPath string) error {
	gg.logger.Info("Initializing git repository")

	// Initialize git repo
	cmd := exec.Command("git", "init")
	cmd.Dir = projectPath
	if err := cmd.Run(); err != nil {
		return fmt.Errorf("failed to initialize git repository: %w", err)
	}

	// Add all files
	cmd = exec.Command("git", "add", ".")
	cmd.Dir = projectPath
	if err := cmd.Run(); err != nil {
		return fmt.Errorf("failed to add files to git: %w", err)
	}

	// Initial commit
	cmd = exec.Command("git", "commit", "-m", "Initial commit - Generated by gomake")
	cmd.Dir = projectPath
	if err := cmd.Run(); err != nil {
		gg.logger.Warning("Failed to create initial commit (this is normal if git user is not configured)")
	}

	return nil
}
