package main

import (
	"log"
	"os"
	"os/signal"
	"syscall"

	"{{.ModuleName}}/internal/config"
	"{{.ModuleName}}/pkg/initializers"
	"{{.ModuleName}}/pkg/logger"
)

func main() {
	// Load environment variables
	if err := initializers.LoadEnv(); err != nil {
		log.Fatal("Failed to load environment:", err)
	}

	// Initialize logger
	appLogger := logger.New(logger.INFO)
	appLogger.Info("Starting {{.ProjectName}} application")

	// Load configuration
	cfg := config.Load()
	appLogger.Info("Configuration loaded successfully")

	// Initialize and start the application
	// TODO: Initialize your adapters, services, and start the server

	appLogger.Info("Application started on port %s", cfg.Port)

	// Wait for interrupt signal to gracefully shutdown
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
	<-quit

	appLogger.Info("Shutting down application...")
	// TODO: Add graceful shutdown logic
}
